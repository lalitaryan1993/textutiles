{"version":3,"sources":["components/Alert.js","components/Navbar.js","components/TextForm.js","App.js","reportWebVitals.js","index.js"],"names":["Alert","props","string","alert","className","type","role","charAt","toUpperCase","slice","msg","Navbar","mode","href","title","id","onClick","toggleMode","htmlFor","TextForm","useState","text","setText","style","color","heading","value","rows","backgroundColor","onChange","event","target","newText","showAlert","toLowerCase","titleCase","split","map","w","substr","join","navigator","clipboard","writeText","length","App","setMode","setAlert","message","setTimeout","document","body","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.4a9cc30e.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nexport default function Alert(props) {\r\n  const capitalizeFirstLetter = (string) => {\r\n    return string.charAt(0).toUpperCase() + string.slice(1);\r\n  };\r\n  return (\r\n    props.alert && (\r\n      <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role='alert'>\r\n        <strong>{capitalizeFirstLetter(props.alert.type)}</strong>: {props.alert.msg}\r\n      </div>\r\n    )\r\n  );\r\n}\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n// import { Link } from 'react-router-dom';\r\n\r\nfunction Navbar(props) {\r\n  return (\r\n    <div>\r\n      <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n        <div className='container-fluid'>\r\n          <a className='navbar-brand' href='#'>\r\n            {props.title}\r\n          </a>\r\n          {/* <Link className='navbar-brand' to='/'>\r\n            {props.title}\r\n          </Link> */}\r\n          <button\r\n            className='navbar-toggler'\r\n            type='button'\r\n            data-bs-toggle='collapse'\r\n            data-bs-target='#navbarSupportedContent'\r\n            aria-controls='navbarSupportedContent'\r\n            aria-expanded='false'\r\n            aria-label='Toggle navigation'\r\n          >\r\n            <span className='navbar-toggler-icon'></span>\r\n          </button>\r\n          <div className='collapse navbar-collapse' id='navbarSupportedContent'>\r\n            <ul className='navbar-nav me-auto mb-2 mb-lg-0'>\r\n              <li className='nav-item'>\r\n                <a className='nav-link active' aria-current='page' href='#'>\r\n                  Home\r\n                </a>\r\n                {/* <Link className='nav-link active' aria-current='page' to='/'>\r\n                  Home\r\n                </Link> */}\r\n              </li>\r\n              <li className='nav-item'>\r\n                {/* <a className='nav-link' href='/about'>\r\n                  About\r\n                </a> */}\r\n                {/* <Link className='nav-link' to='/about'>\r\n                  About\r\n                </Link> */}\r\n              </li>\r\n            </ul>\r\n            {/* <form className='d-flex'>\r\n              <input className='form-control me-2' type='search' placeholder='Search' aria-label='Search' />\r\n              <button className='btn btn-outline-primary' type='submit'>\r\n                Search\r\n              </button>\r\n            </form> */}\r\n            <div className={`form-check form-switch text-${props.mode === 'light' ? 'dark' : 'light'}`}>\r\n              <input className='form-check-input' type='checkbox' id='darkMode' onClick={props.toggleMode} />\r\n              <label className='form-check-label' htmlFor='darkMode'>\r\n                Enable Dark Mode\r\n              </label>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </nav>\r\n    </div>\r\n  );\r\n}\r\n\r\nNavbar.propTypes = {};\r\n\r\nexport default Navbar;\r\n","import React, { useState } from 'react';\r\n// import PropTypes from 'prop-types';\r\n\r\nexport default function TextForm(props) {\r\n  const handleOnChange = (event) => {\r\n    setText(event.target.value);\r\n  };\r\n\r\n  const handleUpClick = () => {\r\n    let newText = text.toUpperCase();\r\n\r\n    setText(newText);\r\n    props.showAlert('Converted to Uppercase', 'success');\r\n  };\r\n  const handleLoClick = () => {\r\n    // let newText = text.toLowerCase();\r\n\r\n    setText(text.toLowerCase());\r\n    props.showAlert('Converted to Uppercase', 'success');\r\n  };\r\n\r\n  const handleTitleCaseClick = () => {\r\n    let titleCase = text\r\n      .split(' ')\r\n      .map((w) => w[0].toUpperCase() + w.substr(1).toLowerCase())\r\n      .join(' ');\r\n\r\n    setText(titleCase);\r\n  };\r\n  const handleExtraSpaces = () => {\r\n    let newText = text.split(/[ ]+/).join(' ');\r\n    setText(newText);\r\n    props.showAlert('Extra spaces removed', 'success');\r\n  };\r\n  const handleCopyToClipBoardClick = () => {\r\n    /* Select the text field */\r\n    // text.select();\r\n    // text.setSelectionRange(0, 99999); /* For mobile devices */\r\n\r\n    /* Copy the text inside the text field */\r\n    navigator.clipboard.writeText(text);\r\n    props.showAlert('Copied to clipboard', 'success');\r\n  };\r\n\r\n  const handleClearClick = () => {\r\n    let newText = '';\r\n\r\n    setText(newText);\r\n    props.showAlert('Text box cleared', 'success');\r\n  };\r\n\r\n  const [text, setText] = useState('');\r\n  return (\r\n    <div>\r\n      <div className='container my-3' style={{ color: props.mode === 'dark' ? 'white' : 'black' }}>\r\n        <h1>{props.heading}</h1>\r\n        <div className='mb-3'>\r\n          <textarea\r\n            className='form-control'\r\n            id='textBox'\r\n            value={text}\r\n            rows='8'\r\n            style={{\r\n              backgroundColor: props.mode === 'dark' ? 'gray' : 'white',\r\n              color: props.mode === 'dark' ? 'white' : 'black',\r\n            }}\r\n            onChange={handleOnChange}\r\n          ></textarea>\r\n        </div>\r\n        <button className='btn btn-primary mx-1' onClick={handleUpClick}>\r\n          Convert to Uppercase\r\n        </button>\r\n        <button className='btn btn-primary mx-1' onClick={handleLoClick}>\r\n          Convert to Lowercase\r\n        </button>\r\n        <button className='btn btn-primary mx-1' onClick={handleTitleCaseClick}>\r\n          Convert to Title Case\r\n        </button>\r\n\r\n        <button className='btn btn-primary mx-1' onClick={handleCopyToClipBoardClick}>\r\n          Copy to Clipboard\r\n        </button>\r\n        <button className='btn btn-primary mx-1' onClick={handleExtraSpaces}>\r\n          Remove Extra Spaces\r\n        </button>\r\n        <button className='btn btn-primary mx-1' onClick={handleClearClick}>\r\n          Clear Text\r\n        </button>\r\n      </div>\r\n      {/* container end */}\r\n\r\n      <div className='container my-3' style={{ color: props.mode === 'dark' ? 'white' : 'black' }}>\r\n        <h2>Your text summary</h2>\r\n        <p>\r\n          {text.split(' ').length} words and {text.length} characters\r\n        </p>\r\n        <p>{0.008 * text.split(' ').length} minutes of reading</p>\r\n        <h2>Preview</h2>\r\n        <p>{text || 'Enter something in the textbox above to preview it here'}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nTextForm.propTypes = {};\r\n","import { useState } from 'react';\nimport './App.css';\nimport Alert from './components/Alert';\nimport About from './components/About';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\n// import { BrowserRouter as Router, Switch, Route, Link } from 'react-router-dom';\n\nfunction App() {\n  const [mode, setMode] = useState('light'); // weather the dark mode is on or off\n  const [alert, setAlert] = useState(null);\n\n  const showAlert = (message, type) => {\n    setAlert({\n      msg: message,\n      type: type,\n    });\n    setTimeout(() => {\n      setAlert(null);\n    }, 1500);\n  };\n  const toggleMode = () => {\n    if (mode === 'light') {\n      setMode('dark');\n      document.body.style.backgroundColor = '#042743';\n      showAlert('Dark mode has been enabled', 'success');\n      document.title = 'TextUtils - Dark Mode';\n    } else {\n      setMode('light');\n      document.body.style.backgroundColor = 'white';\n      showAlert('Light mode has been enabled', 'success');\n      document.title = 'TextUtils - Light Mode';\n    }\n    setMode(mode === 'dark' ? 'light' : 'dark');\n  };\n\n  return (\n    // <Router>\n    <div>\n      <Navbar title='TextUtils' mode={mode} toggleMode={toggleMode} />\n      <Alert alert={alert} />\n      <div className='container my-3'>\n        <div className='row'>\n          <div className='col-md-12'>\n            {/* <Switch>\n                <Route exact path='/about'> */}\n            {/* <About /> */}\n            {/* </Route> */}\n\n            {/* <Route exact path='/'> */}\n            <TextForm heading='Enter the text to analyse below' showAlert={showAlert} mode={mode} />\n            {/* </Route> */}\n            {/* </Switch> */}\n          </div>\n        </div>\n      </div>\n    </div>\n    // </Router>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}